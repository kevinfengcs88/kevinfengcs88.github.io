"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = exports.PreviewIndicator = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _indicatorProvider = _interopRequireDefault(require("../context/indicatorProvider"));

var _enums = require("../models/enums");

var _utils = require("../utils");

var _buttons = require("./buttons");

var _Style = _interopRequireDefault(require("./Style"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const POLLING_INTERVAL = process.env.GATSBY_PREVIEW_POLL_INTERVAL ? parseInt(process.env.GATSBY_PREVIEW_POLL_INTERVAL) : 3000;

const PreviewIndicator = ({
  children
}) => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_Style.default, null), /*#__PURE__*/_react.default.createElement("div", {
  "data-testid": "preview-status-indicator",
  "data-gatsby-preview-indicator": "root",
  "aria-live": "assertive"
}, children));

exports.PreviewIndicator = PreviewIndicator;
let buildId = ``;

const Indicator = () => {
  const [buildInfo, setBuildInfo] = (0, _react.useState)();
  const timeoutRef = (0, _react.useRef)(null);
  const shouldPoll = (0, _react.useRef)(false);
  const trackedInitialLoad = (0, _react.useRef)(false);
  const {
    track
  } = (0, _utils.useTrackEvent)();
  const {
    siteInfo,
    currentBuild
  } = buildInfo || {
    siteInfo: {},
    currentBuild: {}
  };
  const {
    orgId,
    siteId
  } = siteInfo || {};
  const pollData = (0, _react.useCallback)(async function pollData() {
    var _newBuildInfo$current, _newBuildInfo$latestB;

    const prettyUrlRegex = /^preview-/;
    const host = window.location.hostname; // currentBuild is the most recent build that is not QUEUED.
    // latestBuild is the most recent build that finished running (ONLY status ERROR or SUCCESS)

    const isOnPrettyUrl = prettyUrlRegex.test(host);
    const {
      siteInfo,
      currentBuild,
      latestBuild
    } = await (0, _utils.getBuildInfo)();

    if (!buildId) {
      if (isOnPrettyUrl || host === `localhost`) {
        buildId = latestBuild === null || latestBuild === void 0 ? void 0 : latestBuild.id;
      } else {
        // Match UUID from preview build URL https://build-af44185e-b8e5-11eb-8529-0242ac130003.gtsb.io
        const buildIdMatch = host === null || host === void 0 ? void 0 : host.match(/build-(.*?(?=\.))/);

        if (buildIdMatch) {
          buildId = buildIdMatch[1];
        }
      }
    }

    const newBuildInfo = {
      currentBuild,
      latestBuild,
      siteInfo,
      isOnPrettyUrl
    };

    if ((currentBuild === null || currentBuild === void 0 ? void 0 : currentBuild.buildStatus) === _enums.BuildStatus.BUILDING) {
      setBuildInfo({ ...newBuildInfo,
        buildStatus: _enums.BuildStatus.BUILDING
      });
    } else if ((currentBuild === null || currentBuild === void 0 ? void 0 : currentBuild.buildStatus) === _enums.BuildStatus.ERROR) {
      setBuildInfo({ ...newBuildInfo,
        buildStatus: _enums.BuildStatus.ERROR
      });
    } else if (buildId && buildId === (newBuildInfo === null || newBuildInfo === void 0 ? void 0 : (_newBuildInfo$current = newBuildInfo.currentBuild) === null || _newBuildInfo$current === void 0 ? void 0 : _newBuildInfo$current.id)) {
      setBuildInfo({ ...newBuildInfo,
        buildStatus: _enums.BuildStatus.UPTODATE
      });
    } else if (buildId && buildId !== (newBuildInfo === null || newBuildInfo === void 0 ? void 0 : (_newBuildInfo$latestB = newBuildInfo.latestBuild) === null || _newBuildInfo$latestB === void 0 ? void 0 : _newBuildInfo$latestB.id) && (currentBuild === null || currentBuild === void 0 ? void 0 : currentBuild.buildStatus) === _enums.BuildStatus.SUCCESS) {
      setBuildInfo({ ...newBuildInfo,
        buildStatus: _enums.BuildStatus.SUCCESS
      });
    }

    if (shouldPoll.current) {
      timeoutRef.current = setTimeout(pollData, POLLING_INTERVAL);
    }
  }, []);
  (0, _react.useEffect)(() => {
    if (buildInfo !== null && buildInfo !== void 0 && buildInfo.siteInfo && !trackedInitialLoad.current) {
      track({
        eventType: `PREVIEW_INDICATOR_LOADED`,
        buildId,
        orgId,
        siteId
      });
      trackedInitialLoad.current = true;
    }
  }, [buildInfo]);
  (0, _react.useEffect)(() => {
    shouldPoll.current = true;
    pollData();
    return function cleanup() {
      shouldPoll.current = false;

      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
        timeoutRef.current = null;
      }
    };
  }, []);
  const buttonProps = {
    orgId,
    siteId,
    buildId,
    buildStatus: buildInfo === null || buildInfo === void 0 ? void 0 : buildInfo.buildStatus,
    isOnPrettyUrl: buildInfo === null || buildInfo === void 0 ? void 0 : buildInfo.isOnPrettyUrl,
    sitePrefix: siteInfo === null || siteInfo === void 0 ? void 0 : siteInfo.sitePrefix,
    createdAt: currentBuild === null || currentBuild === void 0 ? void 0 : currentBuild.createdAt,
    erroredBuildId: currentBuild === null || currentBuild === void 0 ? void 0 : currentBuild.id
  };
  return /*#__PURE__*/_react.default.createElement(_indicatorProvider.default, null, /*#__PURE__*/_react.default.createElement(PreviewIndicator, null, /*#__PURE__*/_react.default.createElement(_buttons.GatsbyIndicatorButton, (0, _extends2.default)({}, buttonProps, {
    buttonIndex: 1
  })), /*#__PURE__*/_react.default.createElement(_buttons.InfoIndicatorButton, (0, _extends2.default)({}, buttonProps, {
    buttonIndex: 2
  })), /*#__PURE__*/_react.default.createElement(_buttons.LinkIndicatorButton, (0, _extends2.default)({}, buttonProps, {
    buttonIndex: 3
  }))));
};

var _default = Indicator;
exports.default = _default;